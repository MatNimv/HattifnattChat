
import { useState, useEffect } from "react";
import { firestore} from "../../../firebase";
import {v4 as uuidv} from 'uuid';
import sendPubSub from "../../functions/GCP/sendPubSub";
import { Link } from 'react-router-dom';

const SessionsList = ( {isListOpen, handleClose}) => {

    const [yellowConvos, setYellowConvos] = useState([]);
    const [whiteConvos, setWhiteConvos] = useState([]);
    const [selectedColor, setSelectedColor] = useState("YELLOW");
    const [isWhite, setIsWhite] = useState(true);
    const [isYellow, setIsYellow] = useState(true);

    /*convo popup*/
    const [isConvoOpen, setIsConvoOpen] = useState(false);
    const [isDisplayConvo, setIsDisplayConvo] = useState(true);
    const [selectedSession, setSelectedSession] = useState(null);
    const handleConvoOpen = (e, sess) => {e.stopPropagation();setIsConvoOpen(true); setSelectedSession(sess);setIsDisplayConvo(true)}
    const handleConvoClose = (e) => {e.stopPropagation();setIsConvoOpen(false); setSelectedSession(null); setIsDisplayConvo(false)}

    const formatSessionConversation = (session) => {
        let filteredArray = [];

        for (let index = 0; index < session.length; index++) {
            const element = session[index];
            
            let convLength = element.conversation.length
            if(convLength > 3) {
                let lastConvMessage = element.conversation[convLength - 1];
                let shortenedMessage = ""
                //checks the length of the latest message in the sessionconvo.
                //if longer than 30 chars, it is shortened
                if(lastConvMessage.content.length >= 30){ 
                    shortenedMessage = lastConvMessage.content.substring(0, 40) + "...";
                    element.lastMessage = shortenedMessage;
                } else if(lastConvMessage.content.length < 30) { 
                    element.lastMessage = lastConvMessage.content + "...";
                }
                //the first 2 default-start-messages generated by starting a session deletes
                element.conversation.splice(0,2)
                filteredArray.push(element);
            }
        }
        return filteredArray
    }

    const getSessionConversations = async () => {
        const uid = localStorage.getItem("id");

        try {
            const documentRef = firestore.collection("users").doc(uid);
            const subcollectionRef = documentRef.collection("sessions");
            const querySnapshot = await subcollectionRef.get();
            const data = [];
        
            // Loop through the documents in the subcollection and store them in an array
            querySnapshot.forEach((doc) => {
                data.push({ id: doc.id, ...doc.data() });
            });

            //map out and differenciate the two colors from the
            //same session
            let whiteSessionsList = data.map(session => ({
                    dateStarted: session.dateStarted,
                    conversation: session.conversationWhite
                }));
            let yellowSessionsList = data.map(session => ({
                    dateStarted: session.dateStarted,
                    conversation: session.conversationYellow
                }));

            let sessions = {
                yellowSessionsList,
                whiteSessionsList
            }
            return sessions;
            } catch (error) {
                console.error('Error getting sessions: ', error);
                return [];
            }
    }

    const handleTopMenu = (target) => {
        setSelectedColor(target.innerText);

        //h4 menu - YELLOW || WHITE
        let topMenuDivs = document.querySelectorAll(".topMenu div");
        topMenuDivs.forEach((link) => link.className = "");
        target.classList.add("topMenuActive");

        //sessionlist
        let sessionListMenus = document.querySelectorAll(".sessionsList div");
        sessionListMenus.forEach((link) => link.className = "");


        //for some very wierd reason the target.innerText doesnt translate well in the selectedcolorstate. 
        //it is the opposite. so a nice if-sats indeed
        if(selectedColor === "YELLOW") document.querySelector(`#WHITESessions`).classList.add("topMenuActive");
        if(selectedColor === "WHITE") document.querySelector(`#YELLOWSessions`).classList.add("topMenuActive");

    }

    const updateActiveConvo = async () => {
        let sessions = await getSessionConversations();
        let whiteSessions = formatSessionConversation(sessions.whiteSessionsList);
        let yellowSessions = formatSessionConversation(sessions.yellowSessionsList);

        setWhiteConvos(whiteSessions);
        setYellowConvos(yellowSessions);

        if (whiteSessions.length === 0) setIsWhite(false);
        if (yellowSessions.length === 0) setIsYellow(false);
    }

    useEffect(() => {
        updateActiveConvo();
    }, []);

    if (!isListOpen) {
        return null;
    }

    return (
        <div className="overlay">
            <div id="sessionsListWrapper" className={selectedColor}>
                <div className="topMenu">
                    <div onClick={(e) => {handleTopMenu(e.target);sendPubSub("choose_color", window.location.pathname, 3)} } className="topMenuActive"><h4>YELLOW</h4></div>
                    <div onClick={(e) => {handleTopMenu(e.target); sendPubSub("choose_color", window.location.pathname, 4)}}><h4>WHITE</h4></div>
                </div>
                <div className="sessionsList">
                    <div id="YELLOWSessions" className="topMenuActive">
                    {!isYellow ? ( 
                        <section className="noConvo">
                            <h6>Looks like you haven't started any conversations with the Yellow Hattifnatt!</h6>
                            <Link to="/hattifnattmagic?link=chat"><button onClick={(e) =>{sendPubSub("button", window.location.pathname, 15, true)}}>Start Chatting!</button></Link>
                        </section> ) : ( <p></p>)}
                        {yellowConvos.map((sess) => (
                            <div className="oneSession" key={uuidv()} onClick={(e) => {handleConvoOpen(e, sess); sendPubSub("open_convo", window.location.pathname, 1)}}>
                            <div className="sessionDate">
                                <h5>Session started: </h5><p>{sess.dateStarted}</p>
                            </div>
                            <div className="lastMessage">
                                <h6>Last message: </h6><p> {sess.lastMessage}</p>
                            </div>
                            <div className={`displayIs${selectedSession === sess ? 'Open' : 'Closed'} oneChat`}>
                            <div className="chatInfo">
                                <h5 onClick={(e) => { handleConvoClose(e); sendPubSub("button", window.location.pathname, 5);}}> ◄ Return to sessionlist</h5>
                                <h6>Session Start: {sess.dateStarted}</h6>
                                </div>
                                <div className="sessionConvoWrapper">
                                    {selectedSession === sess &&
                                        sess.conversation.map((conv) => (
                                            <div className={`oneMessage ${conv.role}`}>
                                                <div key={uuidv()} className="messageContent">
                                                    <p>{conv.time}</p><p>{conv.content}</p>
                                                </div>
                                            </div>
                                        ))}
                                </div>
                            </div>
                        </div>
                        ))}
                    </div>
                    <div id="WHITESessions">
                        {!isWhite ? ( 
                            <section className="noConvo">
                                <h6>Looks like you haven't started any conversations with the White Hattifnatt!</h6>
                                <Link to="/hattifnattmagic?link=chat"><button onClick={(e) =>{sendPubSub("button", window.location.pathname, 16, true)}}>Start Chatting!</button></Link>
                            </section> ) : ( <div></div>)}
                        {whiteConvos.map((sess) => (
                            <div className="oneSession" key={uuidv()} onClick={(e) => {handleConvoOpen(e, sess); sendPubSub("open_convo", window.location.pathname, 2) }}>
                                <div className="sessionDate">
                                    <h5>Session started: </h5><p>{sess.dateStarted}</p>
                                </div>
                                <div className="lastMessage">
                                    <h6>Last message: </h6><p> {sess.lastMessage}</p>
                                </div>
                                <div className={`displayIs${selectedSession === sess ? 'Open' : 'Closed'} oneChat`}>
                                <div className="chatInfo">
                                    <h5 onClick={(e) => { handleConvoClose(e); sendPubSub("button", window.location.pathname,6);}}> ◄ Return to sessionlist</h5>
                                    <h6>Session Start: {sess.dateStarted}</h6>
                                    </div>
                                    <div className="sessionConvoWrapper">
                                        {selectedSession === sess &&
                                            sess.conversation.map((conv) => (
                                                <div className={`oneMessage ${conv.role}`}>
                                                    <div key={uuidv()} className="messageContent">
                                                        <p>{conv.time}</p><p>{conv.content}</p>
                                                    </div>
                                                </div>
                                            ))}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
            <div className="closeBtn">
                <button onClick={(e) => {handleClose(); handleConvoClose(e); sendPubSub("button", window.location.pathname, 7)}}>CLOSE</button>
            </div>
        </div>
    )
}

export default SessionsList;